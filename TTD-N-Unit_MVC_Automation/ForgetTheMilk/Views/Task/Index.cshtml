@model List<ForgetTheMilk.Controllers.Task>
@{
    ViewBag.Title = "Home Page";
}
<script src="//ajax.googleapis.com/ajax/libs/dojo/1.11.3/dojo/dojo.js"></script>
<body>
    <h1 id="greeting">Hello</h1>
    <!-- load Dojo -->
    <script src="//ajax.googleapis.com/ajax/libs/dojo/1.10.4/dojo/dojo.js"
            data-dojo-config="async: true"></script>

    <script>
        require([
            'dojo/dom',
            'dojo/dom-construct'
        ], function (dom, domConstruct) {
            var greetingNode = dom.byId('greeting');
            domConstruct.place('<em> Dojo!</em>', greetingNode);
        });
        define([
    // The dojo/dom module is required by this module, so it goes
    // in this list of dependencies.
    'dojo/dom'
        ], function (dom) {
            // Once all modules in the dependency list have loaded, this
            // function is called to define the demo/myModule module.
            //
            // The dojo/dom module is passed as the first argument to this
            // function; additional modules in the dependency list would be
            // passed in as subsequent arguments.

            var oldText = {};

            // This returned object becomes the defined value of this module
            return {
                setText: function (id, text) {
                    var node = dom.byId(id);
                    oldText[id] = node.innerHTML;
                    node.innerHTML = text;
                },

                restoreText: function (id) {
                    var node = dom.byId(id);
                    node.innerHTML = oldText[id];
                    delete oldText[id];
                }
            };
        });
    </script>
    <h1 id="greeting">Hello</h1>
    <!-- configure Dojo -->
    <script>
        // Instead of using data-dojo-config, we're creating a dojoConfig
        // object *before* we load dojo.js; they're functionally identical,
        // it's just easier to read this approach with a larger configuration.
        var dojoConfig = {
            async: true,
            // This code registers the correct location of the "demo"
            // package so we can load Dojo from the CDN whilst still
            // being able to load local modules
            packages: [{
                name: "demo",
                location: location.pathname.replace(/\/[^/]*$/, '') + '/demo'
            }]
        };
    </script>
    <!-- load Dojo -->
    <script src="//ajax.googleapis.com/ajax/libs/dojo/1.10.4/dojo/dojo.js"></script>

    <script>
        require([
            'demo/myModule'
        ], function (myModule) {
            myModule.setText('greeting', 'Hello Dojo!');

            setTimeout(function () {
                myModule.restoreText('greeting');
            }, 3000);
        });
    </script>
</body>
<div class="jumbotron">
    @*<h1>ASP.NET</h1>
    <p class="lead">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>
    <p><a href="http://asp.net" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>*@
    <p>Add a Task</p>
    <form action="@Url.Action("Add")" method="POST">
        <input type="text" class="input-lg col-xs-12" name="task"/>
    </form>
</div>

<h3>@Model.Count() Task(s)</h3>
<table class="table">
    <tr>
        <th>Description</th>
        <th>Due Date</th>
    </tr>
    <tbody>
    @foreach (var task in Model)
    {
        <tr>
            <td> @task.Description </td>
            <td> @(task.DueDate.HasValue ? task.DueDate.Value.ToShortDateString() : "")</td>
        </tr>
    }
    </tbody>
</table>

